(function(){
'use strict'
function createSubModules(element,index,array){var subModuleName=moduleName+"."+element;angular.module(subModuleName,[]),array[index]=subModuleName}function configLoader($ocLazyLoadProvider){$ocLazyLoadProvider.config({modules:[{name:"da-loader",serie:!0,files:["bower_components/da-loader/dist/da-loader.css","bower_components/da-loader/dist/da-loader.html"]}]})}function DALoaderController($scope,$controller,$rootScope,LoaderService){function verifyHook(hook){return hook.setUp&&hook.tearDown?!0:!1}function createHooks(){angular.forEach($scope.hooks,function(nomeControlador,index){var controlador=$controller(nomeControlador,{$scope:$scope});if(!verifyHook(controlador))throw new Error("O controlador "+nomeControlador+" não implementa as funções esperadas(setUp,tearDown)");vm.hooks.push(controlador)})}function setUpHooks(){angular.forEach(vm.hooks,function(controlador,index){controlador.setUp()})}function tearDownHooks(){angular.forEach(vm.hooks,function(controlador,index){controlador.tearDown()})}function setUp(){return watchChangeInService=$scope.$watch(function(){return LoaderService.isActive()},function(newValue,oldValue){$scope.display=newValue}),onDestroy=$scope.$on("$destroy",tearDown),setUpHooks()}function tearDown(){return onDestroy(),watchChangeInService(),tearDownHooks()}var onDestroy,watchChangeInService,vm=this;vm.setUp=setUp,vm.tearDown=tearDown,vm.createHooks=createHooks,vm.hooks=[],$scope.display=!1}function LoaderNgRouterController($scope,$rootScope,LoaderService){function setUp(){onStart=$rootScope.$on("$routeChangeStart",function(event,toState,toParams,fromState,fromParams){LoaderService.enable()}),onError=$rootScope.$on("$routeChangeError",function(event,toState,toParams,fromState,fromParams,error){LoaderService.disable()}),onSuccess=$rootScope.$on("$routeChangeSuccess",function(event,toState,toParams,fromState,fromParams){LoaderService.disable()})}function tearDown(){onStart(),onError(),onSuccess()}var onStart,onError,onSuccess,vm=this;vm.setUp=setUp,vm.tearDown=tearDown}function LoaderRestangularController($scope,LoaderService,Restangular){function setUp(){Restangular.addRequestInterceptor(requestInterceptor),Restangular.addResponseInterceptor(responseInterceptor),Restangular.addErrorInterceptor(errorInterceptor)}function tearDown(){}function requestInterceptor(element,operation,what,url){return 0===vm.pendingRequests&&LoaderService.enable(),vm.incrementRequest(),element}function responseInterceptor(data,operation,what,url,response,deferred){return vm.decrementRequest(),vm.hasPendingRequests()||LoaderService.disable(),data}function errorInterceptor(response,deferred,responseHandler){return vm.decrementRequest(),vm.hasPendingRequests()||LoaderService.disable(),!0}function incrementRequest(){self.pendingRequests++}function decrementRequest(){self.pendingRequests--}function hasPendingRequests(){return self.pendingRequests>0}var vm=this;vm.pendingRequests=0,vm.setUp=setUp,vm.tearDown=tearDown,vm.incrementRequest=incrementRequest,vm.decrementRequest=decrementRequest,vm.hasPendingRequests=hasPendingRequests}function LoaderUiRouterController($scope,$rootScope,LoaderService){function setUp(){onStart=$rootScope.$on("$stateChangeStart",function(event,toState,toParams,fromState,fromParams){LoaderService.enable()}),onError=$rootScope.$on("$stateChangeError",function(event,toState,toParams,fromState,fromParams,error){LoaderService.disable()}),onSuccess=$rootScope.$on("$stateChangeSuccess",function(event,toState,toParams,fromState,fromParams){LoaderService.disable()}),onNotFound=$rootScope.$on("$stateNotFound",function(event,unfoundState,fromState,fromParams){LoaderService.disable()})}function tearDown(){onStart(),onError(),onSuccess(),onNotFound()}var onStart,onError,onSuccess,onNotFound,vm=this;vm.setUp=setUp,vm.tearDown=tearDown}function LoaderDirective($rootScope,LoaderService,$parse){function compile(element,attrs,transclude){return{pre:preLink,post:postLink}}function preLink($scope,element,attrs,controller){attrs.hooks||(attrs.hooks='["LoaderUiRouterController"]');var hooks=$parse(attrs.hooks)($scope);$scope.hooks=hooks,delete attrs.hooks}function postLink($scope,element,attrs,controller){controller.createHooks(),controller.setUp()}return{scope:!0,controller:"DALoaderController",controllerAs:"vm",restrict:"AE",templateUrl:"da-loader/loader.html",replace:!0,compile:compile}}function LoaderService($state){function enable(){service.isShowing=!0}function disable(){service.isShowing=!1}function toggle(){service.isShowing=!service.isShowing}function isActive(){return service.isShowing}var isShowing=!1,service={isShowing:isShowing,enable:enable,disable:disable,toggle:toggle,isActive:isActive};return service}var moduleName="da-loader",subModules=["controllers","directives","services","views"];subModules.forEach(createSubModules),angular.module(moduleName,["ui.router","oc.lazyLoad"].concat(subModules)),configLoader.$inject=["$ocLazyLoadProvider"],angular.module("da-loader").config(configLoader),DALoaderController.$inject=["$scope","$controller","$rootScope","LoaderService"],angular.module("da-loader.controllers").controller("DALoaderController",DALoaderController),LoaderNgRouterController.$inject=["$scope","$rootScope","LoaderService"],angular.module("da-loader.controllers").controller("LoaderNgRouterController",LoaderNgRouterController),LoaderRestangularController.$inject=["$scope","LoaderService","Restangular"],angular.module("da-loader.controllers").controller("LoaderRestangularController",LoaderRestangularController),LoaderUiRouterController.$inject=["$scope","$rootScope","LoaderService"],angular.module("da-loader.controllers").controller("LoaderUiRouterController",LoaderUiRouterController),LoaderDirective.$inject=["$rootScope","LoaderService","$parse"],angular.module("da-loader.directives").directive("daLoader",LoaderDirective),LoaderService.$inject=["$state"],angular.module("da-loader.services").service("LoaderService",LoaderService);
})();