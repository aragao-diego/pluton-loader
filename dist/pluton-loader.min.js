;(function(){
'use strict'
function createSubModules(element,index,array){var subModuleName=moduleName+"."+element;angular.module(subModuleName,[]),array[index]=subModuleName}function configLoader($ocLazyLoadProvider){$ocLazyLoadProvider.config({modules:[{name:"pluton-loader",serie:!0,files:["bower_components/pluton-loader/dist/pluton-loader.css","bower_components/pluton-loader/dist/pluton-loader.html"]}]})}function PlutonLoaderController($scope,$controller,$rootScope,PlutonLoaderService){function verifyHook(hook){return!(!hook.setUp||!hook.tearDown)}function createHooks(){angular.forEach($scope.hooks,function(nomeControlador,index){var controlador=$controller(nomeControlador,{$scope:$scope});if(!verifyHook(controlador))throw new Error("O controlador "+nomeControlador+" não implementa as funções esperadas(setUp,tearDown)");vm.hooks.push(controlador)})}function setUpHooks(){angular.forEach(vm.hooks,function(controlador,index){controlador.setUp()})}function tearDownHooks(){angular.forEach(vm.hooks,function(controlador,index){controlador.tearDown()})}function setUp(){return watchChangeInService=$scope.$watch(function(){return PlutonLoaderService.isActive()},function(newValue,oldValue){$scope.display=newValue}),onDestroy=$scope.$on("$destroy",tearDown),setUpHooks()}function tearDown(){return onDestroy(),watchChangeInService(),tearDownHooks()}var onDestroy,watchChangeInService,vm=this;vm.setUp=setUp,vm.tearDown=tearDown,vm.createHooks=createHooks,vm.hooks=[],$scope.display=!1}function LoaderNgRouterController($scope,$rootScope,PlutonLoaderService){function setUp(){onStart=$rootScope.$on("$routeChangeStart",function(event,toState,toParams,fromState,fromParams){PlutonLoaderService.enable()}),onError=$rootScope.$on("$routeChangeError",function(event,toState,toParams,fromState,fromParams,error){PlutonLoaderService.disable()}),onSuccess=$rootScope.$on("$routeChangeSuccess",function(event,toState,toParams,fromState,fromParams){PlutonLoaderService.disable()})}function tearDown(){onStart(),onError(),onSuccess()}var onStart,onError,onSuccess,vm=this;vm.setUp=setUp,vm.tearDown=tearDown}function LoaderRestangularController($scope,PlutonLoaderService,Restangular){function setUp(){Restangular.addFullRequestInterceptor(requestInterceptor),Restangular.addResponseInterceptor(responseInterceptor),Restangular.addErrorInterceptor(errorInterceptor)}function tearDown(){}function requestInterceptor(element,operation,what,url,headers,params,httpConfig){return httpConfig&&httpConfig.hasOwnProperty("pluton-loader")&&httpConfig["pluton-loader"]===!1?element:(vm.incrementRequest(),hasPendingRequests()&&PlutonLoaderService.enable(),element)}function responseInterceptor(data,operation,what,url,response,deferred){return Restangular.configuration.fullResponse===!1?(vm.decrementRequest(),vm.hasPendingRequests()||PlutonLoaderService.disable(),data):(deferred.promise.then(checkForFullResponse),data)}function errorInterceptor(response,deferred,responseHandler){return vm.decrementRequest(),vm.hasPendingRequests()||PlutonLoaderService.disable(),!0}function checkForFullResponse(data){return!!(data&&data.config&&data.config.hasOwnProperty("pluton-loader")&&data.config["pluton-loader"]===!1)||(vm.decrementRequest(),void(vm.hasPendingRequests()||PlutonLoaderService.disable()))}function incrementRequest(){vm.pendingRequests++}function decrementRequest(){vm.pendingRequests--}function hasPendingRequests(){return vm.pendingRequests>0}var vm=this;vm.pendingRequests=0,vm.setUp=setUp,vm.tearDown=tearDown,vm.incrementRequest=incrementRequest,vm.decrementRequest=decrementRequest,vm.hasPendingRequests=hasPendingRequests}function LoaderUiRouterController($scope,$rootScope,PlutonLoaderService){function setUp(){onStart=$rootScope.$on("$stateChangeStart",function(event,toState,toParams,fromState,fromParams){PlutonLoaderService.enable()}),onError=$rootScope.$on("$stateChangeError",function(event,toState,toParams,fromState,fromParams,error){PlutonLoaderService.disable()}),onSuccess=$rootScope.$on("$stateChangeSuccess",function(event,toState,toParams,fromState,fromParams){PlutonLoaderService.disable()}),onNotFound=$rootScope.$on("$stateNotFound",function(event,unfoundState,fromState,fromParams){PlutonLoaderService.disable()})}function tearDown(){onStart(),onError(),onSuccess(),onNotFound()}var onStart,onError,onSuccess,onNotFound,vm=this;vm.setUp=setUp,vm.tearDown=tearDown}function LoaderDirective($rootScope,PlutonLoaderService,$parse){function compile(element,attrs,transclude){return{pre:preLink,post:postLink}}function preLink($scope,element,attrs,controller){attrs.hooks||(attrs.hooks='["LoaderUiRouterController"]');var hooks=$parse(attrs.hooks)($scope);$scope.hooks=hooks,delete attrs.hooks,controller.createHooks(),controller.setUp()}function postLink($scope,element,attrs,controller){}return{scope:!0,priority:500,controller:"PlutonLoaderController",controllerAs:"vm",restrict:"AE",templateUrl:"pluton-loader/loader.html",replace:!0,compile:compile}}function PlutonLoaderService(){function enable(){service.isShowing=!0}function disable(){service.isShowing=!1}function toggle(){service.isShowing=!service.isShowing}function isActive(){return service.isShowing}var isShowing=!1,service={isShowing:isShowing,enable:enable,disable:disable,toggle:toggle,isActive:isActive};return service}var moduleName="pluton-loader",subModules=["controllers","directives","services","views"];subModules.forEach(createSubModules),angular.module(moduleName,["ui.router","oc.lazyLoad"].concat(subModules)),configLoader.$inject=["$ocLazyLoadProvider"],angular.module("pluton-loader").config(configLoader),PlutonLoaderController.$inject=["$scope","$controller","$rootScope","PlutonLoaderService"],angular.module("pluton-loader.controllers").controller("PlutonLoaderController",PlutonLoaderController),function(){function LoaderHttpController($scope,PlutonLoaderService){function setUp(){}function tearDown(){}var vm=this;vm.setUp=setUp,vm.tearDown=tearDown}LoaderHttpController.$inject=["$scope","PlutonLoaderService"],angular.module("pluton-loader.controllers").controller("LoaderHttpController",LoaderHttpController)}(),LoaderNgRouterController.$inject=["$scope","$rootScope","PlutonLoaderService"],angular.module("pluton-loader.controllers").controller("LoaderNgRouterController",LoaderNgRouterController),LoaderRestangularController.$inject=["$scope","PlutonLoaderService","Restangular"],angular.module("pluton-loader.controllers").controller("LoaderRestangularController",LoaderRestangularController),LoaderUiRouterController.$inject=["$scope","$rootScope","PlutonLoaderService"],angular.module("pluton-loader.controllers").controller("LoaderUiRouterController",LoaderUiRouterController),LoaderDirective.$inject=["$rootScope","PlutonLoaderService","$parse"],angular.module("pluton-loader.directives").directive("plutonLoader",LoaderDirective),function(){function LoaderHttpInterceptorFactory($q,PlutonLoaderService){function requestInterceptor(config){return notUseLoader(config)?config:(interceptor.incrementRequest(),hasPendingRequests()&&PlutonLoaderService.enable(),config)}function requestErrorInterceptor(rejection){return $q.reject(rejection)}function responseInterceptor(response){return notUseLoader(response.config)?response:(interceptor.decrementRequest(),interceptor.hasPendingRequests()||PlutonLoaderService.disable(),response)}function reponseErrorInterceptor(rejection){return notUseLoader(rejection.config)?$q.reject(rejection):(interceptor.decrementRequest(),interceptor.hasPendingRequests()||PlutonLoaderService.disable(),$q.reject(rejection))}function notUseLoader(data){return!(!data||!data.hasOwnProperty("pluton-loader")||data["pluton-loader"]!==!1)}function incrementRequest(){interceptor.pendingRequests++}function decrementRequest(){interceptor.pendingRequests--}function hasPendingRequests(){return interceptor.pendingRequests>0}var interceptor={request:requestInterceptor,requestError:requestErrorInterceptor,response:responseInterceptor,responseError:reponseErrorInterceptor,pendingRequests:0,incrementRequest:incrementRequest,decrementRequest:decrementRequest,hasPendingRequests:hasPendingRequests};return interceptor}LoaderHttpInterceptorFactory.$inject=["$q","PlutonLoaderService"],angular.module("pluton-loader.services").factory("PlutonLoaderHttpInterceptor",LoaderHttpInterceptorFactory)}(),angular.module("pluton-loader.services").service("PlutonLoaderService",PlutonLoaderService);
})();